Install NGINX Plus

    cd /opt/nplus-keys/
    ls
    sudo cp nginx-repo* /tmp/
    cd /opt/install-nginx/
    sudo ./install_nplus.sh 
    nginx -v
    curl -I 127.0.0.1
    curl localhost

Review NGINX Plus Default Configuration

	cd /etc/nginx/
	cat nginx.conf
	cd conf.d/
	cat default.conf
	sudo mv default.conf default.conf.bak
	sudo nginx -t
	sudo nginx -T
	sudo nginx -v
	sudo nginx -V
	sudo nginx -s reload

Web Server Configuration
	
	cd /opt/services/
	cd App1/
	ls
	cat index.html
	cd /etc/nginx/conf.d/
	sudo vi web.conf

### web.conf ###
server {
    
    listen       9001;
    index  index.html;
   
    location / {
    root   /opt/services/App1;
    }
}

server {
    
    listen       9002;
    index  index.html;

    location / {
    root   /opt/services/App2;
    }
}

server {
    
    listen       9003;
    index  index.html;

    location / {
    root   /opt/services/App3;
    }
}
### ###

	sudo nginx -t
	sudo nginx -s reload
	curl 10.1.1.5:9001
	curl 10.1.1.5:9002
	curl 10.1.1.5:9003


Configuring Load Balancer

	cd /etc/nginx/conf.d/
	sudo vi lb.conf

### lb.conf ###
upstream backend_servers {
    zone backend_server_zone 64k;
    server 127.0.0.1:9001;
    server 127.0.0.1:9002;
}

server {
    listen 9000;
    autoindex on;

    location / {
    proxy_pass http://backend_servers/;
    #health_check;

    proxy_set_header Host $host;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Real-IP  $remote_addr;
    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Connection "upgrade";

    }
}

### ###

	sudo nginx -t
	sudo nginx -s reload
	curl localhost:9000
	curl localhost:9000
	curl localhost:9000


Configuring NGINX Plus Dashboard

### dashboard.conf ###

server {

    listen       8080;

        location /api {
        api write=on;
        allow all;
    }

    location / {
    root /usr/share/nginx/html;
    index   dashboard.html;
    }
}

### ###


API Gateway
On "docker_api" Box

	cd /opt/ergast-f1-api/
	sudo ./start.sh --build
	sudo docker ps
	curl localhost:8001/api/f1/drivers

On "ubuntu_plus" Box

	cd /etc/nginx/conf.d/
	sudo vi api_gateway.conf

### api_gateway ###

#limit_req_zone $remote_addr zone=perip:1m rate=2r/s;

upstream f1-api {
        server 10.1.1.7:8001; #validate IP address of docker_api
        server 10.1.1.7:8002;

}

server {

        listen 9443;
        #listen 9443 ssl;
        #ssl_certificate ssl/www.example.com.crt; 
        #ssl_certificate_key ssl/www.example.com.key; 
        #ssl_protocols TLSv1.3 TLSv1.2 TLSv1.1; 
        #ssl_prefer_server_ciphers on; 


        location /api/f1/drivers {
        proxy_pass http://f1-api;

        #limit_req zone=perip nodelay;
        #limit_req_status 429;                 

        }

        location /api/f1/seasons {
        proxy_pass http://f1-api;
        }

        location /api/f1/circuits {
        proxy_pass http://f1-api;
        }
}

### ###

	sudo nginx -t
	sudo nginx -s reload
	curl localhost:9443/api/f1/drivers
	curl localhost:9443/api/f1/seasons


API Gateway - SSL Termination

	cd /etc/nginx/
	sudo mkdir ssl
	cd ssl/
	sudo cp /opt/ssl/www.example.com* .
	ls
	cd conf.d/
	sudo vim api_gateway.conf
	sudo nginx -t
	sudo nginx -s reload
	curl localhost:9443/api/f1/drivers
	curl https://localhost:9443/api/f1/drivers --insecure

Enable Rate Limiting

	cd /etc/nginx/conf.d/
	sudo vi api_gateway.conf
	sudo nginx -t
	sudo nginx -s reload
	curl https://localhost:9443/api/f1/drivers --insecure
	!!;!!;!!;!!;!!;


Enable Cache Management

	cd /etc/nginx/conf.d/
	sudo vi cache.conf

### cache.conf ###

proxy_cache_path /opt/nginx-cache levels=1:2 keys_zone=upstream_cache:20m inactive=5m max_size=2G;

server {	
	listen 8095;
	server_name _;

	location / {
	index index.html;
	root /opt/services/covid-app;

	}
}

## You are unable to serve the content and cache content within the same server block

server {
listen 8092;
server_name _;

    location / {
        add_header X-Cache-Status $upstream_cache_status;
        proxy_cache upstream_cache;
	proxy_pass http://localhost:8095;
        proxy_cache_key $scheme$host$request_uri;
        proxy_cache_valid 5m;
        add_header X-Test-Header $host;
    }
}

### ###

	sudo nginx -t
	sudo nginx -s reload
	curl localhost:8092 -v
	curl localhost:8092 -v


Enable Active Health Checks

	cd /etc/nginx/conf.d/
	sudo vi lb.conf
	sudo nginx -t
	sudo nginx -s reload

IP Allow/Deny List with Key Value Store

	cd /etc/nginx/conf.d/
	sudo vi keyval.conf

### keyval.conf ###

keyval_zone zone=allowlist_zone:1m type=ip state=allowlist_zone.keyval;
keyval $remote_addr $target zone=allowlist_zone;


server {

        listen 8443;

        if ($target) {
        return 403 "ACCESS DENIED";
        	}

        location / {
        return 200 "Welcome - Access Granted!";	
        }
}

### ###

	sudo nginx -t
	sudo nginx -s reload
	curl -X GET 'http://10.1.1.5:8080/api/6/http/keyvals/allowlist_zone'
	curl 10.1.1.5:8443
	curl -X POST -d '{"10.1.1.5":"1"}' -s 'http://localhost:8080/api/6/http/keyvals/allowlist_zone'
	curl 10.1.1.5:8443
	curl -X PATCH -d '{"10.1.1.5":"0"}' -s 'http://localhost:8080/api/6/http/keyvals/allowlist_zone'
	curl 10.1.1.5:8443


Install & Configure APP Protect

"Install NAP"
	cd /opt/install-nginx/
	sudo cp -a /etc/nginx /etc/nginx-plus-backup
	sudo apt-get install apt-transport-https lsb-release ca-certificates wget
	sudo wget https://cs.nginx.com/static/keys/nginx_signing.key && sudo apt-key add nginx_signing.key
	printf "deb https://plus-pkgs.nginx.com/ubuntu `lsb_release -cs` nginx-plus\n" | sudo tee /etc/apt/sources.list.d/nginx-plus.list
	sudo apt-get update
	sudo apt-get install app-protect
	cd /etc/nginx/
	sudo vi nginx.conf
	sudo service nginx stop
	sudo service nginx start

"Configure NAP"

	cd /etc/nginx/conf.d/
	sudo vi nap.conf

### nap.conf ###

server {
        listen 8090;
        proxy_http_version 1.1;

        app_protect_enable on;
        app_protect_policy_file "/etc/nginx/NginxDefaultPolicy.json";
        app_protect_security_log_enable on;
        app_protect_security_log "/opt/app_protect/share/defaults/log_default.json" /var/log/app_protect/security.log;


        location / {
            default_type text/html;
            proxy_set_header Host $host;

            proxy_pass http://localhost:8092;
                 
                 }

}

### ###

	curl 10.1.1.5:8090
	curl '10.1.1.5:8090/?<script>'


Install K8s

	sudo su
	apt-get update
	curl -s https://raw.githubusercontent.com/jay-nginx/basic-workshop-udf/main/install-K8s.sh | bash
	kubectl version
	kubectl get pods


Install HELM

	cd /opt/
	git clone https://github.com/nginxinc/kubernetes-ingress/
	cd kubernetes-ingress/deployments/helm-chart
	git checkout v1.9.1
	curl https://baltocdn.com/helm/signing.asc | sudo apt-key add -
	sudo apt-get install apt-transport-https --yes
	echo "deb https://baltocdn.com/helm/stable/debian/ all main" | sudo tee /etc/apt/sources.list.d/helm-stable-debian.list
	sudo apt-get update
	sudo apt-get install helm
	helm repo add nginx-stable https://helm.nginx.com/stable
	helm repo update

Make NGINX Plus Container

	cd /opt/kubernetes-ingress/
	sudo cp /opt/nplus-keys/nginx-repo* .
	apt install make
	make DOCKERFILE=DockerfileForPlus PREFIX=nginx-plus-ingress
	docker images
	helm install my-release nginx-stable/nginx-ingress --set controller.image.repository=nginx-plus-ingress --set controller.nginxplus=true

Install a Demo Application

	cd /opt/kubernetes-ingress/examples/complete-example
	ls
	cat cafe.yaml
	cat cafe-secret.yaml
	cat cafe-ingress.yaml
	kubectl apply -f cafe.yaml
	kubectl apply -f cafe-secret.yaml
	sudo vi cafe-ingress.yaml
	kubectl apply -f cafe-ingress.yaml
	kubectl get svc
	curl -H "Host: cafe.example.com" https://10.1.1.4:32691/tea --insecure

